#include "game.h"

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "snake_utils.h"

/* Helper function definitions */
static void set_board_at(game_t *game, unsigned int row, unsigned int col, char ch);
static bool is_tail(char c);
static bool is_head(char c);
static bool is_snake(char c);
static char body_to_tail(char c);
static char head_to_body(char c);
static unsigned int get_next_row(unsigned int cur_row, char c);
static unsigned int get_next_col(unsigned int cur_col, char c);
static void find_head(game_t *game, unsigned int snum);
static char next_square(game_t *game, unsigned int snum);
static void update_tail(game_t *game, unsigned int snum);
static void update_head(game_t *game, unsigned int snum);

/* Task 1 */
game_t *create_default_game() {
  // TODO: Implement this function.
  // Pseudocode implementation:
  //    game_t *board_state = malloc(sizeof(game_t)); // form the game state memory
  //    if (state == NULL) { return NULL;
  //    hardcode the rows and columns -- 18 rows and 20 columns
  //    board_state -> row = 18;
  //    board_state  -> col = 20;
  //    board_state -> num_snakes = 1; (unsigned int num snakes from spec)
  //    now we need to check if the board_state pointing to board hahs enough space
  //    we need to assign sizeof for the number of rows and the number of colums
  //    we also need to place the initial snake and fruit somewhere on the board
  // Logical implementation below:
  game_t *board_state = malloc(sizeof(game_t));
  
  if (board_state == NULL) {
      return NULL;
  }

  board_state -> num_rows = 18;
  //board_state -> num_cols = 20;
  board_state -> num_snakes = 1;
  board_state -> snakes = malloc(sizeof(snake_t));
  board_state -> snakes -> tail_row = 2;
  board_state -> snakes -> tail_col = 2;
  board_state -> snakes -> head_row = 2;
  board_state -> snakes -> head_col = 4;
  board_state -> snakes -> live = true; //snake is alive!

  //pointers to the rows for each of the coordinate points, we have char** board
  board_state-> board = malloc(board_state -> num_rows * sizeof(char *)); //size of the character
    if (board_state -> board == NULL) {
        return NULL;
    }
    //need to now go through all of the rows and assign the size of the column
    //each row must be terminated w extra c
    for (int i = 0; i < board_state -> num_rows; i++) {
        board_state -> board[i] = malloc((22)* sizeof(char));

        if(board_state -> board[i] == NULL){
            return NULL;
        }
    }
        strcpy(board_state-> board[0], "####################\n");
        strcpy(board_state -> board[1], "#                  #\n");
        strcpy(board_state -> board[2], "# d>D    *         #\n");
        strcpy(board_state -> board[3], "#                  #\n");
        strcpy(board_state -> board[4], "#                  #\n");
        strcpy(board_state -> board[5], "#                  #\n");
        strcpy(board_state -> board[6], "#                  #\n");
        strcpy(board_state -> board[7], "#                  #\n");
        strcpy(board_state -> board[8], "#                  #\n");
        strcpy(board_state -> board[9], "#                  #\n");
        strcpy(board_state -> board[10], "#                  #\n");
        strcpy(board_state -> board[11], "#                  #\n");
        strcpy(board_state -> board[12], "#                  #\n");
        strcpy(board_state -> board[13], "#                  #\n");
        strcpy(board_state -> board[14], "#                  #\n");
        strcpy(board_state -> board[15], "#                  #\n");
        strcpy(board_state -> board[16], "#                  #\n");
        strcpy(board_state -> board[17], "####################\n");

    return board_state;
}

/* Task 2 */
void free_game(game_t *game) {
  // TODO: Implement this function.
  // free(...)
  
    if (game == NULL) {
        return;
    }

    for (int i = 0; i < game -> num_rows; i++) {
        free(game -> board[i]);
    }

    free(game -> board);
    free(game -> snakes);

    free(game);
    return;
}

/* Task 3 */
void print_board(game_t *game, FILE *fp) {
  // TODO: Implement this function.
  
    for (int i = 0; i < game->num_rows; i++){
        fprintf(fp, "%s", game->board[i]);
        //fprintf(fp, "\n");
    }
}

/*
  Saves the current game into filename. Does not modify the game object.
  (already implemented for you).
*/
void save_board(game_t *game, char *filename) {
  FILE *f = fopen(filename, "w");
  print_board(game, f);
  fclose(f);
}

/* Task 4.1 */

/*
  Helper function to get a character from the board
  (already implemented for you).
*/
char get_board_at(game_t *game, unsigned int row, unsigned int col) { return game->board[row][col]; }

/*
  Helper function to set a character on the board
  (already implemented for you).
*/
static void set_board_at(game_t *game, unsigned int row, unsigned int col, char ch) {
  game->board[row][col] = ch;
}

/*
  Returns true if c is part of the snake's tail.
  The snake consists of these characters: "wasd"
  Returns false otherwise.
*/
static bool is_tail(char c) {
  // TODO: Implement this function.
  if (c== 'w' || c == 'd' || c == 'a' || c == 's') {
      return true;
  }else {
      return false;
  }
}

/*
  Returns true if c is part of the snake's head.
  The snake consists of these characters: "WASDx"
  Returns false otherwise.
*/
static bool is_head(char c) {
  // TODO: Implement this function.
  if (c == 'W' || c == 'A' || c == 'D' || c == 'S') {
      return true;
  }else {
      return false;
  }
}

/*
  Returns true if c is part of the snake.
  The snake consists of these characters: "wasd^<v>WASDx"
*/
static bool is_snake(char c) {
  // TODO: Implement this function.
  //snake has head and tail and special characters
  if (c == '^' || c == '>' || c == '<' || c == 'v' || c == is_tail(c) || is_head(c)) {
      return true;
  }
  return false;
}

/*
  Converts a character in the snake's body ("^<v>")
  to the matching character representing the snake's
  tail ("wasd").
*/
static char body_to_tail(char c) {
  // TODO: Implement this function.
  // converts a character in the snakes body to a matching character representing snake's head 
  if (c == '^') {
      return 'w';
  }else if (c == 'v') {
      return 's';
  }else if (c == '<') {
      return 'a';
  }else if (c == '>') {
      return 'd';
  } else {
      return c;
    }
}

/*
  Converts a character in the snake's head ("WASD")
  to the matching character representing the snake's
  body ("^<v>").
*/
static char head_to_body(char c) {
  // TODO: Implement this function.
  if (c == 'A') {
      return '<';
  }else if (c == 'W') {
      return '^';
  }else if (c == 'D') {
      return '>';
  }else if (c == 'S') {
      return 'v';
  } else {
    return c; //invalid
    }
}

/*
  Returns cur_row + 1 if c is 'v' or 's' or 'S'.
  Returns cur_row - 1 if c is '^' or 'w' or 'W'.
  Returns cur_row otherwise.
*/
static unsigned int get_next_row(unsigned int cur_row, char c) {
  // TODO: Implement this function.
  //conditions stated above, following them:
  if (c == 'v' || c == 's' || c =='S') {
      return cur_row + 1;
  }else if (c == '^' || c == 'w' || c == 'W') {
      return cur_row - 1;
  } else {
    return cur_row;
  }
}

/*
  Returns cur_col + 1 if c is '>' or 'd' or 'D'.
  Returns cur_col - 1 if c is '<' or 'a' or 'A'.
  Returns cur_col otherwise.
*/
static unsigned int get_next_col(unsigned int cur_col, char c) {
  // TODO: Implement this function.
  if (c == '>' || c == 'd' || c == 'D') {
      return cur_col + 1;
  }else if (c == '<'|| c == 'a' || c == 'A') {
      return cur_col - 1;
  } else {
      return cur_col;
  }
}

/*
  Task 4.2

  Helper function for update_game. Return the character in the cell the snake is moving into.

  This function should not modify anything.
*/
static char next_square(game_t *game, unsigned int snum) {
  // TODO: Implement this function.
  // implement to find the square the snake is next moving to
  // snum = index of the state to be analysed (use to see where its going)
  // char -- character in the cell the snake is moving into
  // get_next_row helper and get_next_column helper
  
    if (game == NULL) {
        return '\0'; //null character reference
    }

    if (snum >= game->num_snakes) {
        return '0';
    }
    unsigned int row = game->snakes[snum].head_row;
    unsigned int column = game->snakes[snum].head_col;
    unsigned int nrow = get_next_row(row, game->board[row][column]);
    unsigned int ncol = get_next_col(column, game->board[row][column]);
    //get the next character
    char nextcharacter = game->board[nrow][ncol];

  return nextcharacter;
}

/*
  Task 4.3

  Helper function for update_game. Update the head...

  ...on the board: add a character where the snake is moving

  ...in the snake struct: update the row and col of the head

  Note that this function ignores food, walls, and snake bodies when moving the head.
*/
static void update_head(game_t *game, unsigned int snum) {
  // TODO: Implement this function.
  // need to update on the game board and the snake_t struct
  // add a character where the snake head is moving, then update the row and column
  // implementing the same structure from above - need to find the next row and column cause told to update

    unsigned int row = game->snakes[snum].head_row;
    unsigned int column = game->snakes[snum].head_col;
    unsigned int nrow = get_next_row(row, game->board[row][column]);
    unsigned int ncol = get_next_col(column, game->board[row][column]);
    
    //getting the snake tail and column location
    game->snakes[snum].head_row = nrow;
    game->snakes[snum].head_col = ncol;

    char head_position = game->board[row][column];
    game->board[nrow][ncol] = head_position;

    //if (head_position == '\0') {
     //   return;
   // } else { was not updating,remove if
    game-> board[row][column] = head_to_body(head_position);
    return;
}

/*
  Task 4.4

  Helper function for update_game. Update the tail...

  ...on the board: blank out the current tail, and change the new
  tail from a body character (^<v>) into a tail character (wasd)

  ...in the snake struct: update the row and col of the tail
*/
static void update_tail(game_t *game, unsigned int snum) {
  // TODO: Implement this function.
  // same as above
  unsigned int row = game->snakes[snum].tail_row;
  unsigned int column = game->snakes[snum].tail_col;
  unsigned int nrow = get_next_row(row, game->board[row][column]);
  unsigned int ncol = get_next_col(column, game->board[row][column]);
  
  //game->board[row][column] = ' ';
  game->snakes[snum].tail_row = nrow;
  game->snakes[snum].tail_col = ncol;

  // printf("Character at position (%u, %u): %c\n", nrow, ncol, game->board[nrow][ncol]);
  game->board[row][column] = ' ';
  char tail = game->board[nrow][ncol];
  //printf("tail character (%c)", tail);
 // game->board[row][column] = ' ';
//  printf("Character at new position (%u, %u): %c\n", nrow, ncol, game->board[nrow][ncol]);

  game->board[nrow][ncol] = body_to_tail(tail);

//  if (tail != '^' && tail != '<' && tail != 'v' && tail != '>') {
 //   printf("new tail position (%u, %u): %c\n", nrow, ncol, tail);
//}
//issue was in body_to_tail function
    return;
}

/* Task 4.5 */
void update_game(game_t *game, int (*add_food)(game_t *game)) {
  // TODO: Implement this function.
  
    // want to use the snake struct
    
    for (unsigned int i = 0; i < game -> num_snakes; i++) {
            update_head(game, i);
            char next_step = next_square(game, i);

            if (is_snake(next_step) || next_step == '#') {
                set_board_at(game, game -> snakes[i].head_row, game -> snakes[i].head_col, 'x');
                game -> snakes[i].live = false;

            } else if (next_step == '*') {
                update_head(game, i);
                add_food(game);
            } else {
                update_tail(game, i);
                update_head(game, i);
            }
    }
    return; 
}

/* Task 5.1 */
char *read_line(FILE *fp) {
  // TODO: Implement this function.
  return NULL;
}

/* Task 5.2 */
game_t *load_board(FILE *fp) {
  // TODO: Implement this function.
  return NULL;
}

/*
  Task 6.1

  Helper function for initialize_snakes.
  Given a snake struct with the tail row and col filled in,
  trace through the board to find the head row and col, and
  fill in the head row and col in the struct.
*/
static void find_head(game_t *game, unsigned int snum) {
  // TODO: Implement this function.
  return;
}

/* Task 6.2 */
game_t *initialize_snakes(game_t *game) {
  // TODO: Implement this function.
  return NULL;
}
